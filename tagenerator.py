import os
import frontmatter
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate

llm = ChatOpenAI(
    model='deepseek-coder',
    api_key='xxx', 
    base_url='https://api.deepseek.com'
)

tag_set = [
    "ai",
    "machine-learning",
    "algorithm",
    "data-structure",
    "programming-language",
    "software-engineering",
    "note",
    "tool",
    "unix",
    "web",
    "vue",
    "react",
    "typescript",
    "javascript",
    "python",
    "rust",
    "go",
    "java",
    "c",
    "cpp",
    "terminal",
    "git",
]

answer_example = "ai, machine-learning, tool"

template = """
Follow the instructions below carefully:
1. Read the following article:
{content}
2. Pick 3-5 tags that are most relevant to the article from the following tag set:
{tag_set}
3. Generate 1-2 tags by yourself.
4. Answer all the tags in a comma-separated string, Example: {answer_example}

Requirements:
- At most 2 tags can be generated by yourself. Other tags should be selected from the tag set.
- The tag generated by yourself should be a English word or an abbr and be specfic enough to tech blog.
- Make sure the tag is highly relevant to the article.
"""

def generate_tags_with_llm(content):
    # Define a prompt template for generating tags
    prompt = PromptTemplate(
        input_variables=["content", "tag_set", "answer_example"],
        template=template
    )
    
    # Generate tags using the language model
    response = llm.invoke(prompt.format(content=content, tag_set=tag_set, answer_example=answer_example))
    
    # Access the content of the response
    tags = response.content.strip().split(',')  # Updated to access content attribute
    return [tag.strip() for tag in tags]

def process_markdown_files():
    for filename in os.listdir('.'):
        if filename.endswith('.md'):
            with open(filename, 'r', encoding='utf-8') as f:
                post = frontmatter.load(f)
            
            # Generate tags for the content
            content = post.content
            tags = generate_tags_with_llm(content)
            
            # Add tags to the front matter
            post['tags'] = tags
            
            post_content = frontmatter.dumps(post)
            
            # Write the updated content back to the file
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(post_content)
            
            print(f"Processed {filename}: Added tags {tags}")

if __name__ == "__main__":
    process_markdown_files()